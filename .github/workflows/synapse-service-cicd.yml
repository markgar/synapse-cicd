name: synapse-service-cicd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: set up env
        shell: pwsh
        run: |
          $deploymentName = Get-Date -Format "yyyyMMddHHmmss"
          $rgName = "synapse-demo"

          echo "DEPLOYMENT_NAME=$deploymentName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "RG_NAME=$rgName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: retrieve env
        shell: pwsh
        run: |
          Write-Host $env:DEPLOYMENT_NAME
          Write-Host $env:RG_NAME
          
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Service
        shell: pwsh
        run: |
          $deploymentName = $env:DEPLOYMENT_NAME
          $rgName = $env:RG_NAME

          Write-Host $deploymentName 
          Write-Host $rgName 

          $sqlAdminPasswordMap = "synapseSqlAdminPassword=${{ secrets.SYNAPSE_SQL_ADMIN_PASSWORD }}"

          az group create -n $rgName --location eastus
          az deployment group create -g $rgName --template-file ./main.bicep --parameters $sqlAdminPasswordMap --name $deploymentName

      - name: Add access rights
        shell: pwsh
        run: |
          $workspaceName = az deployment group show -g $env:RG_NAME -n $env:DEPLOYMENT_NAME --query properties.outputs.workspaceName.value
          Write-Host $workspaceName
          
          #------------------------------------------------------------------------------------------------------------
          # MAIN SCRIPT BODY
          #------------------------------------------------------------------------------------------------------------
          $SynapseWorkspaceName = $workspaceName
          $IdentityID = "36a895ff-8e24-4b03-bf63-574a9b24ad8f"

          #------------------------------------------------------------------------------------------------------------
          # CONTROL PLANE OPERATION: ASSIGN SYNAPSE WORKSPACE ADMINISTRATOR TO USER-ASSIGNED MANAGED IDENTITY
          # UAMI needs Synapse Admin rights before it can make calls to the Data Plane APIs to create Synapse objects
          #------------------------------------------------------------------------------------------------------------

          $token = az account get-access-token --resource=https://dev.azuresynapse.net --query accessToken --output tsv
          #$token = (Get-AzAccessToken -Resource "https://dev.azuresynapse.net").Token
          $headers = @{ Authorization = "Bearer $token" }

          $uri = "https://$SynapseWorkspaceName.dev.azuresynapse.net/rbac/roleAssignments?api-version=2020-02-01-preview"

          #Assign Synapse Workspace Administrator Role to UAMI
          $body = "{
            roleId: ""6e4bf58a-b8e1-4cc3-bbf9-d73143322b78"",
            principalId: ""$IdentityID""
          }"

          Write-Host "Assign Synapse Administrator Role to UAMI..."

          Invoke-RestMethod -Method Post -ContentType "application/json" -Uri $uri -Headers $headers -Body $body




          #az synapse role assignment create --workspace-name $workspaceName --role "Synapse Administrator" --assignee mgarner@microsoft.com